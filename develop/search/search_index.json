{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"network_wrangler","text":"<p>Network Wrangler is a Python library for managing travel model network scenarios.</p>"},{"location":"#system-requirements","title":"System Requirements","text":"<p>Network Wrangler should be operating system agonistic and has been tested on Ubuntu and Mac OS.</p> <p>In order to assist in installation, its helpful to have either miniconda, anaconda or Docker CE installed.  If you don\u2019t have any of these already, we reommend starting with Miniconda for Python 3.7 as it has the smallest footprint. <code>conda</code> is the environment manager that is contained within both the Anaconda and mini-conda applications. All commands described below should be entered into the <code>Ananconda Prompt</code> command window.</p> <p>Network Wrangler does require Python 3.7+.  If you have a different version of Python installed, <code>conda</code> will take care of installing it for you in the installation instructions below.</p>"},{"location":"#installation","title":"Installation","text":"<p>Network Wrangler uses Python 3.6 and above.  Requirements are stored in <code>requirements.txt</code> but are automatically installed when using <code>pip</code>.</p> <p>If you are managing multiple python versions, we suggest using <code>virtualenv</code> or <code>conda</code> virtual environments. <code>conda</code> is the environment manager that is contained within both the Anaconda and mini-conda applications. Do not add Anaconda to the system path during installation. This may cause problems with other programs that require python 2.7 to be placed in the system path.</p> <p>Example installing and running tests using conda in the command line:</p> <pre><code>conda config --add channels conda-forge\nconda create python=3.7 rtree geopandas osmnx -n &lt;my_wrangler_environment&gt;\nconda activate &lt;my_wrangler_environment&gt;\npip install network-wrangler\npytest\n</code></pre> <p>Network wrangler can be installed in several ways depending on the user\u2019s needs. Installing from github is the simplest method and is appropriate when the user does not anticipate needing to update network wrangler. An update will require rebuilding the network wrangler environment. Installing from clone is slightly more involved and requires the user to have a git manager on their machine, but permits the user to install network wrangler with the <code>-e</code>, edit, option so that their network wrangler installation can be updated through pulling new commits from the network wrangler repo without a full reinstallation.</p>"},{"location":"#from-github","title":"From GitHub","text":"<p>Use the package manager pip to install Network Wrangler from the source on GitHub.</p> <pre><code>conda config --add channels conda-forge\nconda create python=3.7 rtree geopandas osmnx -n &lt;my_wrangler_environment&gt;\nconda activate &lt;my_wrangler_environment&gt;\npip install git+https://github.com/wsp-sag/network_wrangler.git@master#egg=network_wrangler\n</code></pre> <p>Note: if you wanted to install from a specific tag/version number or branch, replace <code>@master</code> with <code>@&lt;branchname&gt;</code>  or <code>@tag</code></p>"},{"location":"#from-clone","title":"From Clone","text":"<p>If you are going to be working on Network Wrangler locally, you might want to clone it to your local machine and install it from the clone.  The -e will install it in editable mode.</p> <p>This is also useful if you want to continue to update your Network Wrangler as it is developed on GitHub.</p> <p>1. Open a terminal to get a command prompt.</p> <p>2. Consider using a virtual environment manager like conda.</p> <p>Create a new environment by typing the following commands into the command prompt (it might take a few minutes).  </p> <pre><code>conda create python=3.7 -n wrangler_env\nconda activate wrangler_env\n</code></pre> <p>I chose <code>wrangler_env</code> as the name of my environment, but you could choose something else\u2026just remember it so that you can access it later.</p> <p>NOTE in order to get back to \u201cthis\u201d conda environment (i.e. after you close this command prompt), you will need to access it from the command line by using the following command:</p> <pre><code>conda activate wrangler_env\n</code></pre> <p>3. Install finicky Requirements</p> <p>Some requirements are best installed using conda rather than \u201cpip\u201d</p> <pre><code>conda config --add channels conda-forge\nconda install rtree geopandas osmnx\n</code></pre> <p>4. \u201cClone\u201d (aka download) network wrangler from Github on to your machine</p> <p>If you have GitHub desktop installed, you can either do this by using the GitHub user interface by clicking on the green button \u201cclone or download\u201d in the main network wrangler repository page.</p> <p>Otherwise, you can use the command prompt to navigate to the directory that you would like to store your network wrangler clone and then using a git command to clone it.</p> <pre><code>cd path to where you want to put wrangler\ngit clone https://github.com/wsp-sag/network_wrangler\n</code></pre> <p>Expected output:</p> <pre><code>cloning into network_wrangler...\nremote: Enumerating objects: 53, done.\nremote: Counting objects: 100% (53/53), done.\nremote: Compressing objects: 100% (34/34), done.\nremote: Total 307 (delta 28), reused 29 (delta 19), pack-reused 254\nReceiving objects: 100% (307/307), 15.94 MiB | 10.49 MiB/s, done.\nResolving deltas: 100% (140/140), done.\n</code></pre> <p>5. Install Network Wrangler in \u201cdevelop\u201d mode.</p> <p>Navigate your command prompt into the network wrangler folder and then install network wrangler in editable mode. This will take a few minutes because it is also installing all the prerequisites.</p> <pre><code>cd network_wrangler\npip install -e .[tests]\n</code></pre> <p>Note: the <code>[tests]</code> flag makes sure to install the testing and development requirements as listed in <code>requirements.tests.txt</code></p> <p>There will be a lot of messy output, but it should end with something like:</p> <pre><code>Running setup.py develop for network-wrangler\nSuccessfully installed Rtree-0.8.3 attrs-19.1.0 cchardet-2.1.4 chardet-3.0.4 click-7.0 click-plugins-1.1.1 cligj-0.5.0 cycler-0.10.0 decorator-4.4.0 descartes-1.1.0 fiona-1.8.6 geojson-2.4.1 geopandas-0.5.1 idna-2.8 isoweek-1.3.3 jsonschema-3.0.2 kiwisolver-1.1.0 matplotlib-3.1.1 munch-2.3.2 network-wrangler networkx-2.3 numpy-1.17.0 osmnx-0.10 pandas-0.25.0 partridge-1.1.0 pyparsing-2.4.2 pyproj-2.2.1 pyrsistent-0.15.4 python-dateutil-2.8.0 pytz-2019.2 pyyaml-5.1.2 requests-2.22.0 shapely-1.6.4.post2 six-1.12.0 urllib3-1.25.3\n</code></pre> <p>6. Test the Installation</p> <p>You can test that network wrangler was properly installed by running the tests as follows:</p> <pre><code>pytest\n</code></pre> <p>Note: if you are not part of the project team and want to contribute code back to the project, please fork before you clone and then add the original repository to your upstream origin list per these directions on github.</p>"},{"location":"#using-docker","title":"Using Docker","text":"<ol> <li>Install Docker</li> <li>Clone git repository (see instructions above) NOTE: this is easiest way right now since repo is private. When it is public we can clone right from github without having to muck around with logins or keys</li> <li>From the cloned repository, open a terminal from the <code>/docker</code> folder and build and run the docker container corresponding to what you want to do by running <code>docker-compose run &lt;container name&gt; &lt;entry point (optional)&gt; --build</code></li> <li>Command to exit container: <code>exit</code></li> </ol> <p>Containers:  - <code>wrangler-jupyter</code> started by running <code>docker-compose run wrangler-jupyter --build</code> is appropriate for running and testing wrangler.    - Default action is to start jupyter notebook which can be found at http://127.0.0.1:8888    - Safe: It creates an empty folder to store jupyter notebooks within the container but wont overwrite the source files on your actual machine.    - Starting Bash: You can also start the container with a command line using <code>docker-compose run wrangler-jupyter /bin/bash --build</code>.    - Doesn\u2019t install development dependencies (although they can be installed from within the container)  - <code>wrangler-ci</code> is a small image without extras meant for running tests and deploying to continuous integration server.    - default command is to run pytest.    - contains development dependencies so that it can run tests and build docs.  - <code>wrangler-dev</code> is the most powerful but dangerous container <code>docker-compose run wrangler-dev /bin/bash --build</code>    - Warning: It will synchronize code edited from the container to your wrangler clone.  This is great for developing within an IDE, but please take this into account.</p>"},{"location":"#common-installation-issues","title":"Common Installation Issues","text":"<p>Issue: <code>clang: warning: libstdc++ is deprecated; move to libc++ with a minimum deployment target of OS X 10.9 [-Wdeprecated]</code> If you are using MacOS, you might need to update your xcode command line tools and headers</p> <p>Issue: <code>OSError: Could not find libspatialindex_c library file</code>* Try installing rtree on its own from the Anaconda cloud</p> <p><pre><code>conda install rtree\n</code></pre> Issue: Shapely, a pre-requisite, doesn\u2019t install propertly because it is missing GEOS module Try installing shapely on its own from the Anaconda cloud</p> <p><pre><code>conda install shapely\n</code></pre> Issue: Conda is unable to install a library or to update to a specific library version Try installing libraries from conda-forge</p> <pre><code>conda install -c conda-forge *library*\n</code></pre> <p>Issue: User does not have permission to install in directories Try running Anaconda Prompt as an administrator.</p>"},{"location":"#quickstart","title":"Quickstart","text":"<p>To get a feel for the API and using project cards, please refer to the \u201cWrangler Quickstart\u201d jupyter notebook.</p> <p>To start the notebook, open a command line in the network_wrangler top-level directory and type:</p> <p><code>jupyter notebook</code></p>"},{"location":"#documentation","title":"Documentation","text":"<p>Documentation can be built from the <code>/docs</code> folder using the command: <code>make html</code></p>"},{"location":"#usage","title":"Usage","text":"<pre><code>import network_wrangler\n\n##todo this is just an example for now\n\n## Network Manipulation\nmy_network = network_wrangler.read_roadway_network(...) # returns\nmy_network.apply_project_card(...) # returns\nmy_network.write_roadway_network(...) # returns\n\n## Scenario Building\nmy_scenario = scenario_from_network(roadway_network, transit_network)\nmy_scenario.add_projects(directory, keyword)\nmy_scenario.write_networks(directory, format)\n</code></pre>"},{"location":"#attribution","title":"Attribution","text":"<p>This project is built upon the ideas and concepts implemented in the network wrangler project by the San Francisco County Transportation Authority and expanded upon by the Metropolitan Transportation Commission.</p> <p>While Network Wrangler as written here is based on these concepts, the code is distinct and builds upon other packages such as <code>geopandas</code> and <code>partridge</code> which hadn\u2019t been implemented when networkwrangler 1.0 was developed.</p>"},{"location":"#contributing","title":"Contributing","text":"<p>Pull requests are welcome. Please open an issue first to discuss what you would like to change. Please make sure to update tests as appropriate.</p>"},{"location":"#license","title":"License","text":"<p>Apache-2.0</p>"},{"location":"api/","title":"Macro Rendering Error","text":"<p>FileNotFoundError: [Errno 2] No such file or directory: \u2018/home/runner/work/network_wrangler/network_wrangler/network_wrangler\\schemas\\roadway_network_node.json\u2019</p> <pre><code>Traceback (most recent call last):\n  File \"/opt/hostedtoolcache/Python/3.8.16/x64/lib/python3.8/site-packages/mkdocs_macros/plugin.py\", line 480, in render\n    return md_template.render(**page_variables)\n  File \"/opt/hostedtoolcache/Python/3.8.16/x64/lib/python3.8/site-packages/jinja2/environment.py\", line 1301, in render\n    self.environment.handle_exception()\n  File \"/opt/hostedtoolcache/Python/3.8.16/x64/lib/python3.8/site-packages/jinja2/environment.py\", line 936, in handle_exception\n    raise rewrite_traceback_stack(source=source)\n  File \"&lt;template&gt;\", line 19, in top-level template code\n  File \"/home/runner/work/network_wrangler/network_wrangler/main.py\", line 26, in include_file\n    with open(full_filename, \"r\") as f:\nFileNotFoundError: [Errno 2] No such file or directory: '/home/runner/work/network_wrangler/network_wrangler/network_wrangler\\\\schemas\\\\roadway_network_node.json'\n</code></pre>"},{"location":"design/","title":"Design","text":""},{"location":"design/#atomic-parts","title":"Atomic Parts","text":"<p>NetworkWrangler deals with four primary atomic parts:</p> <p>1. <code>Scenario</code> objects describe a Roadway Network, Transit Network, and collection of Projects. Scenarios manage the addition and construction of projects on the network via projct cards. Scenarios can be based on or tiered from other scenarios.</p> <p>2. <code>RoadwayNetwork</code> objects stores information about roadway nodes, directed links between nodes, and the shapes of links (note that the same shape can be shared between two or more links). Network Wrangler reads/writes roadway network objects from/to three files: <code>links.json</code>, <code>shapes.geojson</code>, and <code>nodes.geojson</code>. Their data is stored as GeoDataFrames in the object.</p> <p>3. <code>TransitNetwork</code> objects contain information about stops, routes, trips, shapes, stoptimes, and frequencies. Network Wrangler reads/writes transit network information from/to gtfs csv files and stores them as DataFrames within a <code>Partridge</code> <code>feed</code> object.  Transit networks can be associated with Roadway networks.</p> <p>4.<code>ProjectCard</code> objects store infromation (including  metadata) about changes to the network.  Network Wtanglr reads project cards from .yml files validates them, and manages them within a <code>Scenario</code> object.</p>"},{"location":"development/","title":"Development","text":""},{"location":"development/#contributing-to-network-wrangler","title":"Contributing to Network Wrangler","text":""},{"location":"development/#roles","title":"Roles","text":""},{"location":"development/#how-to-contribute","title":"How to Contribute","text":""},{"location":"development/#setup","title":"Setup","text":"<ol> <li>Make sure you have a GitHub account.  </li> <li>Make sure you have git, a terminal (e.g. Mac Terminal, CygWin, etc.), and a text editor installed on your local machine.  Optionally, you will likely find it easier to use GitHub Desktop, an IDE instead of a simple text editor like VSCode, Eclipse, Sublime Text, etc.  </li> <li>Fork the repository into your own GitHub account and clone it locally.  </li> <li>Install your <code>network_wrangler</code> clone in development mode: <code>pip install . -e</code></li> <li>Install documentation requirements: <code>pip install -r requirements.docs.txt</code></li> <li>Install development requirements: <code>pip install -r requirements.tests.txt</code></li> <li>[Optional] Install act to run github actions locally.  </li> </ol>"},{"location":"development/#development-workflow","title":"Development Workflow","text":"<ol> <li>Create an issue for any features/bugs that you are working on.</li> <li>Create a branch to work on a new issue (or checkout an existing one where the issue is being worked on).  </li> <li>Develop comprehensive tests in the <code>/tests</code> folder.</li> <li>Modify code including inline documentation such that it passes all  tests (not just your new ones)</li> <li>Lint code using <code>pre-commit run --all-files</code></li> <li>Fill out information in the pull request template</li> <li>Submit all pull requests to the <code>develop</code> branch.</li> <li>Core developer will review your pull request and suggest changes.</li> <li>After requested changes are complete, core developer will sign off on pull-request merge.</li> </ol> <p>!tip: Keep pull requests small and focused. One issue is best.</p> <p>!tip: Don\u2019t forget to update any associated #documentation as well!</p>"},{"location":"development/#documentation","title":"Documentation","text":"<p>Documentation is produced by mkdocs:</p> <ul> <li><code>mkdocs build</code>: builds documentation</li> <li><code>mkdocs serve</code>: builds and serves documentation to review locally in browswer</li> </ul> <p>Documentation is built and deployed using the <code>mike</code> package and Github Actions configured in <code>.github/workflows/</code> for each \u201cref\u201d (i.e. branch) in the network_wrangler repository.</p>"},{"location":"development/#testing-and-continuous-integration","title":"Testing and Continuous Integration","text":"<p>Tests and test data reside in the <code>/tests</code> directory:</p> <ul> <li><code>pytest</code>: runs all tests</li> </ul> <p>Continuous Integration is managed by Github Actions in <code>.github/workflows</code>. All tests other than those with the decorator <code>@pytest.mark.skipci</code> will be run.</p>"},{"location":"development/#project-governance","title":"Project Governance","text":"<p>The project is currently governed by representatives of its two major organizational contributors:</p> <ul> <li>Metropolitan Council (MN)</li> <li>Metropolitan Transportation Commission (California)</li> </ul>"},{"location":"development/#code-of-conduct","title":"Code of Conduct","text":"<p>Contributors to the Network Wrangler Project are expected to read and follow the CODE_OF_CONDUCT for the project.</p>"},{"location":"development/#contributors","title":"Contributors","text":"<ol> <li>Lisa Zorn - initial Network Wrangler implementation at SFCTA</li> <li>Billy Charlton</li> <li>Elizabeh Sall</li> <li>Sijia Wang</li> <li>David Ory</li> <li>Ashish K.</li> </ol> <p>!Note: There are likely more contributors - feel free to add your name if we missed it!</p>"}]}